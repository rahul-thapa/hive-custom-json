{"version":3,"sources":["logo.svg","Vendors/hive_keychain.js","Components/CustomJson/customJson.js","App.js","reportWebVitals.js","index.js"],"names":["hive_keychain","current_id","requests","handshake_callback","requestHandshake","callback","this","dispatchCustomEvent","requestVerifyKey","account","message","key","rpc","request","type","username","method","requestSignBuffer","requestAddAccountAuthority","authorizedUsername","role","weight","requestRemoveAccountAuthority","requestAddKeyAuthority","authorizedKey","requestRemoveKeyAuthority","requestBroadcast","operations","requestSignTx","tx","requestSignedCall","params","console","log","typeWif","requestPost","title","body","parent_perm","parent_account","json_metadata","permlink","comment_options","parent_username","requestVote","author","requestCustomJson","id","json","display_msg","requestTransfer","to","amount","memo","currency","enforce","requestSendToken","requestDelegation","delegatee","unit","requestWitnessVote","witness","vote","requestProxy","proxy","requestPowerUp","recipient","hive","steem","requestPowerDown","hive_power","steem_power","requestCreateClaimedAccount","new_account","owner","active","posting","requestCreateProposal","receiver","subject","daily_pay","start","end","extensions","requestRemoveProposal","proposal_ids","requestUpdateProposalVote","approve","name","data","Object","assign","request_id","document","dispatchEvent","CustomEvent","detail","window","addEventListener","event","source","response","CustomJson","state","onChangeHandler","e","obj","target","value","setState","onSubmitHandler","preventDefault","Container","style","display","flexDirection","justifyContent","height","marginTop","className","Card","padding","Form","Group","controlId","Label","Control","onChange","placeholder","as","rows","Button","onClick","href","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a610f91f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","/**\n * Use the `hive_keychain` methods listed below to issue requests to the Hive blockchain.\n */\nconst hive_keychain = {\n  current_id: 1,\n  requests: {},\n  handshake_callback: null,\n  /**\n   * This function is called to verify Keychain installation on a user's device\n   * @param {function} callback Confirms Keychain installation\n   */\n  requestHandshake: function (callback) {\n    this.handshake_callback = callback;\n    this.dispatchCustomEvent(\"swHandshake_hive\", \"\");\n  },\n  /**\n   * This function is called to verify that the user has a certain authority over an account, by requesting to decode a message\n   * @param {String} account Hive account to perform the request\n   * @param {String} message Message to be decoded by the account\n   * @param {String} key Type of key. Can be 'Posting','Active' or 'Memo'\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestVerifyKey: function (account, message, key, callback, rpc) {\n    var request = {\n      type: \"decode\",\n      username: account,\n      message: message,\n      method: key,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests a message to be signed with proper authority\n   * @param {String} account Hive account to perform the request\n   * @param {String} message Message to be signed by the account\n   * @param {String} key Type of key. Can be 'Posting','Active' or 'Memo'\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestSignBuffer: function (account, message, key, callback, rpc) {\n    var request = {\n      type: \"signBuffer\",\n      username: account,\n      message: message,\n      method: key,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests to add account authority over another account. For more information about multisig, please read https://peakd.com/utopian-io/@stoodkev/how-to-set-up-and-use-multisignature-accounts-on-steem-blockchain\n   * @param {String} account Hive account to perform the request\n   * @param {String} authorizedUsername Authorized account\n   * @param {String} role Type of authority. Can be 'Posting','Active' or 'Memo'\n   * @param {number} weight Weight of the authority\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestAddAccountAuthority: function (\n    account,\n    authorizedUsername,\n    role,\n    weight,\n    callback,\n    rpc\n  ) {\n    var request = {\n      type: \"addAccountAuthority\",\n      username: account,\n      authorizedUsername,\n      role,\n      weight,\n      method: \"Active\",\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests to remove an account authority over another account. For more information about multisig, please read https://peakd.com/utopian-io/@stoodkev/how-to-set-up-and-use-multisignature-accounts-on-steem-blockchain\n   * @param {String} account Hive account to perform the request\n   * @param {String} authorizedUsername Account to lose authority\n   * @param {String} role Type of authority. Can be 'Posting','Active' or 'Memo'\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestRemoveAccountAuthority: function (\n    account,\n    authorizedUsername,\n    role,\n    callback,\n    rpc\n  ) {\n    var request = {\n      type: \"removeAccountAuthority\",\n      username: account,\n      authorizedUsername,\n      role,\n      method: \"Active\",\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests to add a new key authority to an account. For more information about multisig, please read https://peakd.com/utopian-io/@stoodkev/how-to-set-up-and-use-multisignature-accounts-on-steem-blockchain\n   * @param {String} account Hive account to perform the request\n   * @param {String} authorizedKey New public key to be associated with the account\n   * @param {String} role Type of authority. Can be 'Posting','Active' or 'Memo'\n   * @param {number} weight Weight of the key authority\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestAddKeyAuthority: function (\n    account,\n    authorizedKey,\n    role,\n    weight,\n    callback,\n    rpc\n  ) {\n    var request = {\n      type: \"addKeyAuthority\",\n      username: account,\n      authorizedKey,\n      weight,\n      role,\n      method: \"Active\",\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests to remove a key to an account. For more information about multisig, please read https://peakd.com/utopian-io/@stoodkev/how-to-set-up-and-use-multisignature-accounts-on-steem-blockchain\n   * @param {String} account Hive account to perform the request\n   * @param {String} authorizedKey Key to be removed (public key).\n   * @param {String} role Type of authority. Can be 'Posting','Active' or 'Memo'.\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestRemoveKeyAuthority: function (\n    account,\n    authorizedKey,\n    role,\n    callback,\n    rpc\n  ) {\n    var request = {\n      type: \"removeKeyAuthority\",\n      username: account,\n      authorizedKey,\n      role,\n      method: \"Active\",\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Generic broadcast request\n   * @param {String} account Hive account to perform the request\n   * @param {Array} operations Array of operations to be broadcasted\n   * @param {String} key Type of key. Can be 'Posting','Active' or 'Memo'\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestBroadcast: function (account, operations, key, callback, rpc) {\n    var request = {\n      type: \"broadcast\",\n      username: account,\n      operations,\n      method: key,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests to sign a transaction with a given authority\n   * @param {String} account Hive account to perform the request\n   * @param {Object} tx Unsigned transaction\n   * @param {String} key Type of key. Can be 'Posting','Active' or 'Memo'\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestSignTx: function (account, tx, key, callback, rpc) {\n    var request = {\n      type: \"signTx\",\n      username: account,\n      tx,\n      method: key,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests a signed call\n   * @param {String} account Hive account to perform the request\n   * @param {String} method Method of the call\n   * @param {String} params Parameters of the call\n   * @param {String} key Type of key. Can be 'Posting','Active' or 'Memo'\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestSignedCall: function (account, method, params, key, callback, rpc) {\n    console.log(\"getting request\");\n    var request = {\n      type: \"signedCall\",\n      username: account,\n      method,\n      params,\n      typeWif: key,\n      rpc,\n    };\n    console.log(request);\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n\n  // Example comment_options: {\"author\":\"stoodkev\",\"permlink\":\"hi\",\"max_accepted_payout\":\"100000.000 SBD\",\"percent_steem_dollars\":10000,\"allow_votes\":true,\"allow_curation_rewards\":true,\"extensions\":[[0,{\"beneficiaries\":[{\"account\":\"yabapmatt\",\"weight\":1000},{\"account\":\"steemplus-pay\",\"weight\":500}]}]]}\n  /**\n   * Requests to broadcast a blog post/comment\n   * @param {String} account Hive account to perform the request\n   * @param {String} title Title of the blog post\n   * @param {String} body Content of the blog post\n   * @param {String} parent_perm Permlink of the parent post. Main tag for a root post\n   * @param {String} parent_account Author of the parent post. Pass null for root post\n   * @param {Object} json_metadata Parameters of the call\n   * @param {String} permlink Permlink of the blog post\n   * @param {Object} comment_options Options attached to the blog post. Consult Hive documentation to learn more about it\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestPost: function (\n    account,\n    title,\n    body,\n    parent_perm,\n    parent_account,\n    json_metadata,\n    permlink,\n    comment_options,\n    callback,\n    rpc\n  ) {\n    var request = {\n      type: \"post\",\n      username: account,\n      title,\n      body,\n      parent_perm,\n      parent_username: parent_account,\n      json_metadata,\n      permlink,\n      comment_options,\n      rpc,\n    };\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests a vote\n   * @param {String} account Hive account to perform the request\n   * @param {String} permlink Permlink of the blog post\n   * @param {String} author Author of the blog post\n   * @param {String} weight Weight of the vote, comprised between -10,000 (-100%) and 10,000 (100%)\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestVote: function (account, permlink, author, weight, callback, rpc) {\n    var request = {\n      type: \"vote\",\n      username: account,\n      permlink,\n      author,\n      weight,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests a custom JSON broadcast\n   * @param {String} account Hive account to perform the request\n   * @param {String} id Type of custom_json to be broadcasted\n   * @param {String} key Type of key. Can be 'Posting','Active' or 'Memo'\n   * @param {String} json Stringified custom json\n   * @param {String} display_msg Message to display to explain to the user what this broadcast is about\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestCustomJson: function (\n    account,\n    id,\n    key,\n    json,\n    display_msg,\n    callback,\n    rpc\n  ) {\n    var request = {\n      type: \"custom\",\n      username: account,\n      id: id, //can be \"custom\", \"follow\", \"reblog\" etc.\n      method: key, // Posting key is used by default, active can be specified for id=custom .\n      json: json, //content of your json\n      display_msg: display_msg,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests a transfer\n   * @param {String} account Hive account to perform the request\n   * @param {String} to Hive account to receive the transfer\n   * @param {String} amount Amount to be transfered. Requires 3 decimals.\n   * @param {String} memo The memo will be automatically encrypted if starting by '#' and the memo key is available on Keychain. It will also overrule the account to be enforced, regardless of the 'enforce' parameter\n   * @param {String} currency 'HIVE' or 'HBD'\n   * @param {function} callback Keychain's response to the request\n   * @param {boolean} [enforce=false] If set to true, user cannot chose to make the transfer from another account\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestTransfer: function (\n    account,\n    to,\n    amount,\n    memo,\n    currency,\n    callback,\n    enforce = false,\n    rpc\n  ) {\n    var request = {\n      type: \"transfer\",\n      username: account,\n      to,\n      amount,\n      memo,\n      enforce,\n      currency,\n      rpc,\n    };\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests a token transfer\n   * @param {String} account Hive account to perform the request\n   * @param {String} to Hive account to receive the transfer\n   * @param {String} amount Amount to be transfered. Requires 3 decimals.\n   * @param {String} memo Memo attached to the transfer\n   * @param {String} currency Token to be sent\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestSendToken: function (\n    account,\n    to,\n    amount,\n    memo,\n    currency,\n    callback,\n    rpc\n  ) {\n    var request = {\n      type: \"sendToken\",\n      username: account,\n      to,\n      amount,\n      memo,\n      currency,\n      rpc,\n    };\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests a delegation broadcast\n   * @param {String} username Hive account to perform the request\n   * @param {String} delegatee Account to receive the delegation\n   * @param {number} amount Amount to be transfered. Requires 3 decimals for HP, 6 for VESTS.\n   * @param {String} unit HP or VESTS\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestDelegation: function (\n    username,\n    delegatee,\n    amount,\n    unit,\n    callback,\n    rpc\n  ) {\n    var request = {\n      type: \"delegation\",\n      username,\n      delegatee,\n      amount,\n      unit,\n      rpc,\n    };\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Requests a witness vote broadcast\n   * @param {String} username Hive account to perform the request\n   * @param {String} witness Account to receive the witness vote\n   * @param {boolean} vote Set to true to vote for the witness, false to unvote\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestWitnessVote: function (username, witness, vote, callback, rpc) {\n    var request = {\n      type: \"witnessVote\",\n      username,\n      witness,\n      vote,\n      rpc,\n    };\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Select an account as proxy\n   * @param {String} username Hive account to perform the request\n   * @param {String} proxy Account to become the proxy. Empty string ('') to remove a proxy\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestProxy: function (username, proxy, callback, rpc) {\n    console.log(username, proxy);\n    var request = {\n      type: \"proxy\",\n      username,\n      proxy,\n      rpc,\n    };\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Request a power up\n   * @param {String} username Hive account to perform the request\n   * @param {String} recipient Account to receive the power up\n   * @param {number} hive Amount of HIVE to be powered up\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestPowerUp: function (username, recipient, hive, callback, rpc) {\n    var request = {\n      type: \"powerUp\",\n      username,\n      recipient,\n      steem: hive,\n      rpc,\n    };\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Request a power down\n   * @param {String} username Hive account to perform the request\n   * @param {number} hive_power Amount of HIVE to be powered down\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestPowerDown: function (username, hive_power, callback, rpc) {\n    var request = {\n      type: \"powerDown\",\n      username,\n      steem_power: hive_power,\n      rpc,\n    };\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Request the creation of an account using claimed tokens\n   * @param {String} username Hive account to perform the request\n   * @param {String} new_account New account to be created\n   * @param {object} owner owner authority object\n   * @param {object} active active authority object\n   * @param {object} posting posting authority object\n   * @param {String} memo public memo key\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestCreateClaimedAccount: function (\n    username,\n    new_account,\n    owner,\n    active,\n    posting,\n    memo,\n    callback,\n    rpc\n  ) {\n    const request = {\n      type: \"createClaimedAccount\",\n      username,\n      new_account,\n      owner,\n      active,\n      posting,\n      memo,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n\n  //HF21\n  /**\n   * Request the creation of a DHF proposal\n   * @param {String} username Hive account to perform the request\n   * @param {String} receiver Account receiving the funding if the proposal is voted\n   * @param {String} subject Title of the DAO\n   * @param {String} permlink Permlink to the proposal description\n   * @param {number} daily_pay Daily amount to be received by `receiver`\n   * @param {Date} start Starting date\n   * @param {Date} end Ending date\n   * @param {Array} extensions\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestCreateProposal: function (\n    username,\n    receiver,\n    subject,\n    permlink,\n    daily_pay,\n    start,\n    end,\n    extensions,\n    callback,\n    rpc\n  ) {\n    const request = {\n      type: \"createProposal\",\n      username,\n      receiver,\n      subject,\n      permlink,\n      start,\n      end,\n      daily_pay,\n      extensions,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Request the removal of a DHF proposal\n   * @param {String} username Hive account to perform the request\n   * @param {Array} proposal_ids Ids of the proposals to be removed\n   * @param {Array} extensions\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestRemoveProposal: function (\n    username,\n    proposal_ids,\n    extensions,\n    callback,\n    rpc\n  ) {\n    const request = {\n      type: \"removeProposal\",\n      username,\n      proposal_ids,\n      extensions,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n  /**\n   * Vote/Unvote a DHF proposal\n   * @param {String} username Hive account to perform the request\n   * @param {Array} proposal_ids Ids of the proposals to be removed\n   * @param {boolean} approve Set to true to support the proposal, false to remove a vote\n   * @param {Array} extensions\n   * @param {function} callback Keychain's response to the request\n   * @param {String} [rpc=null] Override user's RPC settings\n   */\n  requestUpdateProposalVote: function (\n    username,\n    proposal_ids,\n    approve,\n    extensions,\n    callback,\n    rpc\n  ) {\n    const request = {\n      type: \"updateProposalVote\",\n      username,\n      proposal_ids,\n      approve,\n      extensions,\n      rpc,\n    };\n\n    this.dispatchCustomEvent(\"swRequest_hive\", request, callback);\n  },\n\n  // Send the customEvent\n  dispatchCustomEvent: function (name, data, callback) {\n    this.requests[this.current_id] = callback;\n    data = Object.assign(\n      {\n        request_id: this.current_id,\n      },\n      data\n    );\n    document.dispatchEvent(\n      new CustomEvent(name, {\n        detail: data,\n      })\n    );\n    this.current_id++;\n  },\n};\n\nwindow.addEventListener(\n  \"message\",\n  function (event) {\n    // We only accept messages from ourselves\n    if (event.source != window) return;\n\n    if (event.data.type && event.data.type == \"hive_keychain_response\") {\n      const response = event.data.response;\n      if (response && response.request_id) {\n        if (hive_keychain.requests[response.request_id]) {\n          hive_keychain.requests[response.request_id](response);\n          delete hive_keychain.requests[response.request_id];\n        }\n      }\n    } else if (\n      event.data.type &&\n      event.data.type == \"hive_keychain_handshake\"\n    ) {\n      if (hive_keychain.handshake_callback) {\n        hive_keychain.handshake_callback();\n      }\n    }\n  },\n  false\n);\n\nexport default hive_keychain;\n","import React, { Component } from \"react\";\nimport { Container, Form, Button, Card } from \"react-bootstrap\";\n\nimport hive_keychain from \"../../Vendors/hive_keychain\";\n\nclass CustomJson extends Component {\n  state = {};\n\n  onChangeHandler = (e) => {\n    const key = e.target.name;\n    const obj = {};\n    obj[key] = e.target.value;\n    this.setState({ ...obj });\n  };\n\n  onSubmitHandler = (e) => {\n    e.preventDefault();\n    hive_keychain.requestCustomJson(\n      this.state.username,\n      this.state.id,\n      this.state.key,\n      this.state.json,\n      \"Doing stuff\"\n    );\n  };\n  render() {\n    return (\n      <Container\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n          height: \"100vh\",\n        }}\n      >\n        <div style={{ marginTop: \"10px\" }}>\n          <h2>\n            Interface to broadcast custom json operations on the Hive\n            blockchain.\n          </h2>\n          <p className=\"text-muted\">Note: Requires keychain extension.</p>\n        </div>\n\n        <Card style={{ padding: \"10px\" }}>\n          <Form className=\"mt-3\">\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                onChange={(e) => this.onChangeHandler(e)}\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Username\"\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>JSON ID</Form.Label>\n              <Form.Control\n                onChange={(e) => this.onChangeHandler(e)}\n                type=\"text\"\n                name=\"id\"\n                placeholder=\"ssc-mainnet-hive\"\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Key</Form.Label>\n              <Form.Control\n                onChange={(e) => this.onChangeHandler(e)}\n                type=\"text\"\n                name=\"key\"\n                placeholder=\"active/posting\"\n              />\n            </Form.Group>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Label>JSON</Form.Label>\n              <Form.Control\n                onChange={(e) => this.onChangeHandler(e)}\n                as=\"textarea\"\n                name=\"json\"\n                rows={3}\n              />\n            </Form.Group>\n            <Button onClick={this.onSubmitHandler}>Submit</Button>\n          </Form>\n        </Card>\n        <p>\n          Built by <a href=\"http://peakd.com/@rahul.stan\">@rahul.stan</a>{\" \"}\n        </p>\n      </Container>\n    );\n  }\n}\n\nexport default CustomJson;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CustomJson from \"./Components/CustomJson/customJson\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CustomJson />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}